import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

/**
 * Product class.
 * @author Daniel Harper
 */
public class Product {

    private ObservableList<Part> associatedParts = FXCollections.observableArrayList();
    private int id;
    private String name;
    private double price;
    private int stock;
    private int min;
    private int max;

    /**
     * Constructor for product
     * @param id Product ID to set.
     * @param name Product name to set.
     * @param price Price to set.
     * @param stock Stock/Inventory to set.
     * @param min Min to set.
     * @param max Max to set.
     */
    public Product(int id, String name, double price, int stock, int min, int max) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.stock = stock;
        this.min = min;
        this.max = max;
        //FUTURE ENHANCEMENT: Be able to omit the ID to have it autogenerated
    }

    /**
     * Gets the ID of the product.
     * @return Returns the Id
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the ID of the product.
     * @param id Sets the Id
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the name of the product.
     * @return Returns the Name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the product.
     * @param name Name to set
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the price of the product.
     * @return Returns the price
     */
    public double getPrice() {
        return price;
    }

    /**
     * Sets the price of the product.
     * @param price Sets the price
     */
    public void setPrice(double price) {
        this.price = price;
    }

    /**
     * Gets the Stock/Inventory of the product.
     * @return Returns the stock
     */
    public int getStock() {
        return stock;
    }

    /**
     * Sets the stock of the product.
     * @param stock Sets the Stock
     * @throws Exception when stock is set above max or below min
     */
    public void setStock(int stock) throws Exception {
        if (stock > max || stock < min)
        {
            throw new Exception("Stock cannot go above max capacity or below minimum capacity");
        }
        this.stock = stock;
    }

    /**
     * Gets the min of the product.
     * @return Returns the min
     */
    public int getMin() {
        return min;
    }

    /**
     * Sets the min of the product.
     * @param min Sets the min
     */
    public void setMin(int min) {
        this.min = min;
    }

    /**
     * Gets the max of the product.
     * @return Returns the Max
     */
    public int getMax() {
        return max;
    }

    /**
     * Sets the max of the product.
     * @param max Sets the Max to this
     */
    public void setMax(int max) {
        this.max = max;
    }

    /**
     * Adds the associated part to the list.
     * @param part Part to add to the list
     * @throws Exception if Part is null
     */
    public void addAssociatedPart(Part part) throws Exception {
        if (part == null)
        {
            throw new Exception("Part cannot be null");
        }
        associatedParts.add(part);
    }

    /**
     * Adds the entire ObservableList to the associated parts.
     * @param partList Part to add to the list
     * @throws Exception if Part is null
     */
    public void addAssociatedPart(ObservableList<Part> partList) throws Exception {
        if (partList == null)
        {
            throw new Exception("PartList cannot be null");
        }
        for (Part p: partList) {
            associatedParts.add(p);
        }
    }

    /**
     * Deletes an associated part from the list.
     * @param selectedAssociatedPart AssociatedPart to be removed from the list (will remove all instances)
     * @return Returns true if something is removed, false otherwise
     */
    public boolean deleteAssociatedPart(Part selectedAssociatedPart) {
        return associatedParts.removeAll(selectedAssociatedPart);
    }

    /**
     * Gets all the associated parts associated with the product.
     * @return Returns an ObservableList of all Associated Parts
     */
    public ObservableList<Part> getAllAssociatedParts() {
        return associatedParts;
    }
}
