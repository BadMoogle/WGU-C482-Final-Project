/**
 * Base Part class.  Base to Outsourced and InHouse.
 * @author Daniel Harper
 */
public abstract class Part {
    private int id;
    private String name;
    private double price;
    private int stock;
    private int min;
    private int max;


    /**
     * Constructor
     * @param id ID to set for the new part object
     * @param name Name to set for the new part object
     * @param price Price to set for the new part object
     * @param stock Inventory/Stock to set for the new part object
     * @param min Minimum amount of inventory
     * @param max Maximum amount of inventory
     */
    protected Part(int id, String name, double price, int stock, int min, int max) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.stock = stock;
        this.min = min;
        this.max = max;
        //FUTURE ENHANCEMENT: Be able to omit the ID to have it autogenerated
    }

    /**
     * Returns the Part ID.
     * @return Returns the Id
     */
    public int getId() {
        return id;
    }

    /**
     * Sets the Part ID.
     * @param id Sets the Id
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Returns the name of the part.
     * @return Returns the name
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the part.
     * @param name Sets the name
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Returns the price of the part.
     * @return Returns the price
     */
    public double getPrice() {
        return price;
    }

    /**
     * Sets the price of the part.
     * @param price Sets the Price
     */
    public void setPrice(double price) {
        this.price = price;
    }

    /**
     * Returns the Inventory/Stock of the part
     * @return Returns the stock
     */
    public int getStock() {
        return stock;
    }

    /**
     * Sets the Inventory/Stock of the part.
     * @param stock Sets the stock
     * @throws Exception when it is set higher than max or lower than min
     */
    public void setStock(int stock) throws Exception {
        if (stock < min || stock > max)
        {
            throw new Exception("Stock cannot go above maximum or minimum storage available");
        }
        this.stock = stock;
    }

    /**
     * Returns the min of the part.
     * @return Returns the Min
     */
    public int getMin() {
        return min;
    }

    /**
     * Sets the min of the part.
     * @param min Sets the Min
     */
    public void setMin(int min) {
        this.min = min;
    }

    /**
     * Gets the max of the part.
     * @return Returns the Max
     */
    public int getMax() {
        return max;
    }

    /**
     * Sets the max of the part.
     * @param max Sets the Max
     */
    public void setMax(int max) {
        this.max = max;
    }
}
